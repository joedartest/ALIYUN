// https://www.liaoxuefeng.com/wiki/896043488029600/898732792973664

//============================================
// 一、下载Git，并安装
// 创建版本库 (就是在电脑里随便创建一个文件夹)
// 右键 - Git Bash Here 打开命令窗口
// ////////////////////////////////////
// init 创建仓库
$ git init
// ////////////////////////////////////
//--------------------------------------------
// 创建文件 readme.txt
// 写入内容 : haha
// 保存文件 ctrl+s
// ////////////////////////////////////
// 把文件添加到暂存区(stage)
// 多文件用空格隔开 a.txt b.txt
$ git add readme.txt
// ////////////////////////////////////
// 把文件提交到仓库
// 备注:每次操作的记录 自己写
$ git commit -m "备注"
// ////////////////////////////////////
//============================================



//============================================
// 二、时光穿梭机
//--------------------------------------------
// ////////////////////////////////////
// 查看当前状态
// 如有文件修改，就会显示
// 否则 就是干净的
$ git status
// ////////////////////////////////////
// 不知道上一次是怎么修改文件的
$ git diff readme.txt
// ////////////////////////////////////
//============================================



//============================================
// 二、时光穿梭机 - 版本回退
//--------------------------------------------
// ////////////////////////////////////
// 显示从最近到最远的提交日志
$ git log
// ////////////////////////////////////
// 如果信息太多，眼花缭乱
$ git log --pretty=oneline
// ////////////////////////////////////
// 回退到上一版本 (上一个HEAD^、上两个HEAD^^)
// 也可这样表示 前n个版本HEAD~n
$ git reset --hard HEAD^
// ////////////////////////////////////
// 查看文件内容
$ cat readme.txt
// ////////////////////////////////////
// 已回退上两个版本，还想前进到最新版本
// 只要命令窗口未关闭，找到id (id至少写5吧)
$ git reset --hard 249a6
// ////////////////////////////////////
// 记录你的每一次命令，就可以恢复任意版本
$ git reflog
// ////////////////////////////////////
//============================================


//============================================
// 二、时光穿梭机 - 工作区和暂存区
// 
//  工作区                版本库
// ┏━━━━━━━┓     ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
// ┃       ┃     ┃               HEAD━━━┓    ┃
// ┃       ┃     ┃                      ↓    ┃
// ┃       ┃     ┃┏━stage━┓        ┏━master━┓┃
// ┃       ┃ add ┃┃       ┃ commit ┃        ┃┃
// ┃ flies-┃-----┃-->    ------------>      ┃┃
// ┃       ┃     ┃┃       ┃        ┃        ┃┃
// ┃       ┃     ┃┃ flies ┃        ┃  flies ┃┃
// ┃       ┃     ┃┃       ┃        ┃        ┃┃
// ┃       ┃     ┃┗━━━━━━━┛        ┗━━━━━━━━┛┃
// ┗━━━━━━━┛     ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
//============================================



//============================================
// 二、时光穿梭机 - 管理修改
//--------------------------------------------
// ////////////////////////////////////
// 多次add，之后一次commit
// 就是将之前多次的add合并
$ git add readme.txt
$ git add readme.txt
$ git commit -m "多次add一次commit"
// ////////////////////////////////////
//============================================



//============================================
// 二、时光穿梭机 - 撤销修改
//--------------------------------------------
// ////////////////////////////////////
// 丢弃工作区的修改
// 如果未add 则恢复到版本库的版本
// 如果已add 则恢复到暂存区的版本
$ git checkout -- readme.txt
// ////////////////////////////////////
//============================================



//============================================
// 二、时光穿梭机 - 删除文件
//--------------------------------------------
// ////////////////////////////////////
// 本地删除 或 用命令删除文件
$ rm readme.txt
// ////////////////////////////////////
// 确实要从版本库中删除
$ git rm readme.txt
// 并且紧跟着 commit
// ////////////////////////////////////
//============================================



//============================================
// 三、远程仓库
//--------------------------------------------
// ////////////////////////////////////
// 1、创建SSH Key
$ ssh-keygen -t rsa -C "email@example.com"
// ////////////////////////////////////
// 2、登陆GitHub，打开'Account settings'，'SSH Keys'页面
// 将该本地仓 /.ssh/id_rsa.pub公钥 代码复制进去
//============================================



//============================================
// 三、远程仓库 - 添加远程库
//--------------------------------------------
// 1、new repository
// 2、填写仓库名(yourgitname)，确定
// ////////////////////////////////////
// 3、把一个已有的本地仓库与之关联
$ git remote add origin git@github.com:自己账户名/仓库名.git
// ////////////////////////////////////
// 4、把本地库的所有内容推送到远程库上
$ git push -u origin master
// ////////////////////////////////////
//============================================



//============================================
// 三、远程仓库 - 从远程库克隆
//--------------------------------------------
// ////////////////////////////////////
// 克隆远程仓到本地
$ git clone git@github.com:账户名/仓库名.git
// ////////////////////////////////////
// 查看文件列表
$ ls
// ////////////////////////////////////
//============================================




